/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package interfaceGraphique;

import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Point;
import java.awt.RenderingHints;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;
import models.*;

/**
 *
 * @author CSX101
 */
public class weightedCanvas extends javax.swing.JPanel {

    /**
     * Creates new form Canvas
     */
    public static WeightedGraph gr;
    public static Integer count=1;
    
    
    private Draw drawUtils;

    public static Graph graph;

    private Node selectedNode = null;
    private Node hoveredNode = null;
    private Edge hoveredEdge = null;

    private java.util.List<Node> path = null;

    private Point cursor;
    public static boolean undirected=true;
    public weightedCanvas() {
        initComponents();
        initialisation(undirected);
    }
    public void  initialisation(boolean type ){           
         gr= new WeightedGraph(true);
         graph = new Graph();
    }
    

    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                formMouseDragged(evt);
            }
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                formMouseMoved(evt);
            }
        });
        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                formMouseClicked(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                formMouseReleased(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 791, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 515, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    public void setPath(List<Node> path) {
        this.path = path;
        hoveredEdge = null;
        repaint();
    }
    
    private void formMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseClicked
        // TODO add your handling code here:
     
        java.awt.event.MouseEvent e=evt;
        
        Node selected = null;
        for(Node node : graph.getNodes()) {
            if(Draw.isWithinBounds(e, node.getCoord())){
                selected = node;
                break;
            }
        }

        if(selected!=null) {
            if(e.isControlDown() && e.isShiftDown()){
                graph.deleteNode(selected);
                graph.setSolved(false);
                repaint();
                return;
            } else if(e.isControlDown() && graph.isSolved()){
                path = selected.getPath();
                repaint();
                return;
            } else if(e.isShiftDown()){
                if(SwingUtilities.isLeftMouseButton(e)){
                    if(!graph.isDestination(selected))
                        graph.setSource(selected);
                    else
                        JOptionPane.showMessageDialog(null, "Destination can't be set as Source");
                } else if(SwingUtilities.isRightMouseButton(e)) {
                    if(!graph.isSource(selected))
                        graph.setDestination(selected);
                    else
                        JOptionPane.showMessageDialog(null, "Source can't be set as Destination");
                }else
                    return;

                graph.setSolved(false);
                repaint();
                return;
            }
        }

        if(hoveredEdge!=null){
            if(e.isControlDown() && e.isShiftDown()){
                graph.getEdges().remove(hoveredEdge);
                hoveredEdge = null;
                graph.setSolved(false);
                repaint();
                return;
            }

            return;
        }

        for(Node node : graph.getNodes()) {
            if(Draw.isOverlapping(e, node.getCoord())){
                JOptionPane.showMessageDialog(null, "Overlapping Node can't be created");
                return;
            }
        }

        graph.addNode(e.getPoint());
        gr.addVertex(count); 
        count++;
        graph.setSolved(false);
        repaint();       
    }//GEN-LAST:event_formMouseClicked

    private void formMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseDragged
        // TODO add your handling code here:
        
        hoveredNode = null;
           java.awt.event.MouseEvent e=evt;
        for (Node node : graph.getNodes()) {
            if(selectedNode ==null && Draw.isWithinBounds(e, node.getCoord())){
                selectedNode = node;
            } else if(Draw.isWithinBounds(e, node.getCoord())) {
                hoveredNode = node;
            }
        }

        if(selectedNode !=null){
            if(e.isControlDown()){
                selectedNode.setCoord(e.getX(), e.getY());
                cursor = null;
                repaint();
                return;
            }

            cursor = new Point(e.getX(), e.getY());
            repaint();
        }
        
    }//GEN-LAST:event_formMouseDragged

    private void formMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseMoved
        // TODO add your handling code here:
        java.awt.event.MouseEvent e=evt;
        if(e.isControlDown()){
            hoveredNode = null;
            for (Node node : graph.getNodes()) {
                if(Draw.isWithinBounds(e, node.getCoord())) {
                    hoveredNode = node;
                }
            }
        }

        hoveredEdge = null;

        for (Edge edge : graph.getEdges()) {
            if(Draw.isOnEdge(e, edge)) {
                hoveredEdge = edge;
            }
        }

        repaint();
    }//GEN-LAST:event_formMouseMoved

    private void formMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseReleased
        // TODO add your handling code here:
         for (Node node : graph.getNodes()) {
            if(selectedNode !=null && node!= selectedNode && Draw.isWithinBounds(evt, node.getCoord())){
                Edge new_edge = new Edge(selectedNode, node);
                graph.addEdge(new_edge);
                
                
            String input = JOptionPane.showInputDialog("Enter weight : ");
            try {
                int weight = Integer.parseInt(input);
                double wt= Double.parseDouble(input);
                if (weight > 0) {   
                    new_edge.setWeight(Integer.parseInt(input));
                    
                    gr.addEdge(selectedNode.getId(), node.getId(),wt);
                    
                    System.out.println(gr.getVertices().toString());
                    graph.setSolved(false);
                    repaint();
                } else {
                    String alg = weightedWindow.Algorithms.getSelectedItem().toString();
                    if(alg.equals("Dijkstra") ){
                    JOptionPane.showMessageDialog(null, "Weight should be positive");
                    }
                }
            } catch (NumberFormatException nfe) {}
               
                
                
                graph.setSolved(false);
            }
        }
        selectedNode = null;
        hoveredNode = null;
        repaint();
    }//GEN-LAST:event_formMouseReleased

   public void reset(){
        graph.clear();
        selectedNode = null;
        hoveredNode = null;
        hoveredEdge = null;
        repaint();
    }
    
    @Override
    protected void paintComponent(Graphics g) {
        super.paintComponent(g);

        Graphics2D graphics2d = (Graphics2D) g;
        graphics2d.setRenderingHint(RenderingHints.KEY_ANTIALIASING,
                RenderingHints.VALUE_ANTIALIAS_ON);
        graphics2d.setRenderingHint(RenderingHints.KEY_TEXT_ANTIALIASING,
                RenderingHints.VALUE_TEXT_ANTIALIAS_ON);

        drawUtils = new Draw(graphics2d);

        if(graph.isSolved()){
            drawUtils.drawPath(path);
        }

        if(selectedNode != null && cursor != null){
            Edge e = new Edge(selectedNode, new Node(cursor));
            if(undirected){
            drawUtils.drawEdge(e);
            }else{
            drawUtils.drawArrow(e);
            }
        }

        for(Edge edge : graph.getEdges()){
            
            if(undirected){
            if(edge == hoveredEdge)
            drawUtils.drawHoveredEdge(edge);
            drawUtils.drawEdge(edge);
            }else{
            drawUtils.drawArrow(edge);
            }
        }

        for(Node node : graph.getNodes()){
            if(node == selectedNode || node == hoveredNode)
                drawUtils.drawHalo(node);
            if(graph.isSource(node))
                drawUtils.drawSourceNode(node);
            else if(graph.isDestination(node))
                drawUtils.drawDestinationNode(node);
            else
                drawUtils.drawNode(node);
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
